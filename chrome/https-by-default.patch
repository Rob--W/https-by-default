diff --git a/components/omnibox/browser/location_bar_model_impl.cc b/components/omnibox/browser/location_bar_model_impl.cc
index 689f02345fd8..9539bd697e0c 100644
--- a/components/omnibox/browser/location_bar_model_impl.cc
+++ b/components/omnibox/browser/location_bar_model_impl.cc
@@ -41,12 +41,15 @@ LocationBarModelImpl::~LocationBarModelImpl() {
 
 // LocationBarModelImpl Implementation.
 std::u16string LocationBarModelImpl::GetFormattedFullURL() const {
-  return GetFormattedURL(url_formatter::kFormatUrlOmitDefaults);
+  return GetFormattedURL(
+      url_formatter::kFormatUrlOmitDefaults &
+      ~url_formatter::kFormatUrlOmitHTTP);
 }
 
 std::u16string LocationBarModelImpl::GetURLForDisplay() const {
   url_formatter::FormatUrlTypes format_types =
-      url_formatter::kFormatUrlOmitDefaults;
+      url_formatter::kFormatUrlOmitDefaults &
+      ~url_formatter::kFormatUrlOmitHTTP;
   if (delegate_->ShouldTrimDisplayUrlAfterHostName()) {
     format_types |= url_formatter::kFormatUrlTrimAfterHost;
   }
diff --git a/components/omnibox/browser/autocomplete_input.cc b/components/omnibox/browser/autocomplete_input.cc
index 43fc0dc783d8..1f7e5ce9dee1 100644
--- a/components/omnibox/browser/autocomplete_input.cc
+++ b/components/omnibox/browser/autocomplete_input.cc
@@ -285,6 +285,17 @@ metrics::OmniboxInputType AutocompleteInput::Parse(
   // between an HTTP URL and a query, or the scheme is HTTP or HTTPS, in which
   // case we should reject invalid formulations.
 
+  if (!parts->scheme.is_nonempty() &&
+      base::EqualsCaseInsensitiveASCII(parsed_scheme_utf8, url::kHttpScheme)) {
+    // Scheme was not specified. url_fixer::FixupURL automatically adds http:,
+    // but we want to default to https instead.
+    if (scheme)
+      *scheme = base::ASCIIToUTF16(url::kHttpsScheme);
+    GURL::Replacements replacements;
+    replacements.SetSchemeStr(url::kHttpsScheme);
+    *canonicalized_url = canonicalized_url->ReplaceComponents(replacements);
+  }
+
   // Determine the host family.  We get this information by (re-)canonicalizing
   // the already-canonicalized host rather than using the user's original input,
   // in case fixup affected the result here (e.g. an input that looks like an
